plot(FGPP6$time, FGPP6$GPPt*d_avg/PQ*mgCmgO2,  ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="6")
lines(FGPP6$time, FGPP6$GPPt*d_avg/1.3*mgCmgO2,  ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2); title(main="6")
lines(GPP6[,2], col="red", lwd=2)
plot(FGPP7$time, FGPP7$GPPt*d_avg/PQ*mgCmgO2, ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="7")
lines(FGPP7$time, FGPP7$GPPt*d_avg/1.3*mgCmgO2, ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP7[,2], col="red", lwd=2)
plot(FGPP8$time, FGPP8$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="8")
lines(FGPP8$time, FGPP8$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP8[,2], col="red",lwd=2)
plot(FGPP9$time, FGPP9$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="9")
lines(FGPP9$time, FGPP9$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2); title(main="9")
lines(GPP9[,2], col="red", lwd=2)
plot(FGPP10$time, FGPP10$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="10")
lines(FGPP10$time, FGPP10$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP10[,2], col="red", lwd=2)
plot(FGPP11$time, FGPP11$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,2), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="11")
lines(FGPP11$time, FGPP11$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP11[,2], col="red", lwd=2)
plot(FGPP12$time, FGPP12$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,2), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="12")
lines(FGPP12$time, FGPP12$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP12[,2], col="red", lwd=2)
png("/home/tom/projecten/andere/Thijs/figures/GPPFourier_20170908.png", width=480*12/7)
par(mfrow=c(3,4))
plot(FGPP1$time, FGPP1$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="1")
lines(FGPP1$time, FGPP1$GPPt*d_avg/PQ/1.3*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP1[,2], col="red", lwd=2)
legend("topleft", col=c("black", "black", "red"), legend=c("Fourier, PQ=1", "Fourier, PQ=1.3", "Delwaq out"), lty=c(1,2,1), bty="n", lwd=2)
# lines(GPP1$time, PP[,1], col="red")
plot(FGPP2$time, FGPP2$GPPt*d_avg/PQ*mgCmgO2,ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=3); title(main="2")
lines(FGPP2$time, FGPP2$GPPt*d_avg/PQ/1.3*mgCmgO2,ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=3, lty=2)
lines(GPP2[,2], col="red", lwd=2, lty=2)
plot(FGPP3$time, FGPP3$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,100), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="3")
lines(FGPP3$time, FGPP3$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,100), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP3[,1]-GPP3[1,1], GPP3[,2], col="red")
plot(FGPP4$time, FGPP4$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="4")
lines(FGPP4$time, FGPP4$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP4[,2], col="red", lwd=2)
plot(FGPP5$time, FGPP5$GPPt*d_avg/PQ*mgCmgO2, ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, ylim=c(0,2)); title(main="5")
lines(FGPP5$time, FGPP5$GPPt*d_avg/1.3*mgCmgO2, ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2); title(main="5")
lines(GPP5[,2], col="red", lwd=2)
plot(FGPP6$time, FGPP6$GPPt*d_avg/PQ*mgCmgO2,  ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="6")
lines(FGPP6$time, FGPP6$GPPt*d_avg/1.3*mgCmgO2,  ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2); title(main="6")
lines(GPP6[,2], col="red", lwd=2)
plot(FGPP7$time, FGPP7$GPPt*d_avg/PQ*mgCmgO2, ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="7")
lines(FGPP7$time, FGPP7$GPPt*d_avg/1.3*mgCmgO2, ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP7[,2], col="red", lwd=2)
plot(FGPP8$time, FGPP8$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="8")
lines(FGPP8$time, FGPP8$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP8[,2], col="red",lwd=2)
plot(FGPP9$time, FGPP9$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="9")
lines(FGPP9$time, FGPP9$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2); title(main="9")
lines(GPP9[,2], col="red", lwd=2)
plot(FGPP10$time, FGPP10$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="10")
lines(FGPP10$time, FGPP10$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,30), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP10[,2], col="red", lwd=2)
plot(FGPP11$time, FGPP11$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,2), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="11")
lines(FGPP11$time, FGPP11$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP11[,2], col="red", lwd=2)
plot(FGPP12$time, FGPP12$GPPt*d_avg/PQ*mgCmgO2, ylim=c(0,2), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2); title(main="12")
lines(FGPP12$time, FGPP12$GPPt*d_avg/1.3*mgCmgO2, ylim=c(0,10), ylab="GPP [gC m-2 d-1]", xlab="time", type="l", lwd=2, lty=2)
lines(GPP12[,2], col="red", lwd=2)
dev.off()
#
source("/home/tom/projecten/Sieperda/drafts/SettlingVelocities/LoadAllPostProcessed.R")
ls()
names(Allresults)
Allresults$May_loc1bot_1[,"G"]
plot(Allresults$May_loc1bot_1[,"G"])
i <- 1
Allresults[[1]][,"G"]
Allresults[[1]]
names(Allresults[[1]])
colnames(Allresults[[1]])
colnames(Allresults[[2]])
colnames(Allresults[[3]])
colnames(Allresults[[4]])
colnames(Allresults[[5]])
colnames(Allresults[[6]])
for (i in 3:length(Allresults)){
G <- Allresults[[i]][,"G"]
}
i
names(Allresults)
i
i <- 5
G <- Allresults[[i]][,"G"]
plot(G)
maxlength <- max(lapply(Allresults, function(x) retur(dim(x)[1])))
(dim(x)[1])))
maxlength <- max(lapply(Allresults, function(x) return(dim(x)[1])))
class(Allresults)
maxlength <- max(lapply(Allresults, function(x) {return(dim(x)[1])}))
maxlength <- max(lapply(Allresults,
length))
lapply(Allresults, length)
max(lapply(Allresults, length))
lengths <- (lapply(Allresults, function(x){return(dim(x)[1])})
)
lengths
c(lengths)
as.vector(lengths)
?lapply
(lapply(Allresults, function(x){return(dim(x)[1])}, simplify=TRUE)
)
lengths <- (lapply(Allresults, function(x){return(dim(x)[1])}), simplify=TRUE)
lengths <- lapply(Allresults, function(x){return(dim(x)[1])}, simplify=TRUE)
unlist(lengths)
lengths <- max(unlist(lapply(Allresults, function(x){return(dim(x)[1])}))
)
lengths
maxlength <- max(unlist(lapply(Allresults, function(x){return(dim(x)[1])})))
for (i in c(4,5,111:14)){
if (is.elem)
Gi <- Allresults[[i]][,"G"]
G <- c(Gi, rep(NA, maxlength-length(Gi)))
AllG <- c(AllG, G)
}
for (i in c(4,5,11:14)){
Gi <- Allresults[[i]][,"G"]
G <- c(Gi, rep(NA, maxlength-length(Gi)))
AllG <- c(AllG, G)
}
AllG <- NULL
for (i in c(4,5,11:14)){
Gi <- Allresults[[i]][,"G"]
G <- c(Gi, rep(NA, maxlength-length(Gi)))
AllG <- c(AllG, G)
}
AllG
for (i in c(4,5,11:14)){
Gi <- Allresults[[i]][,"G"]
G <- c(Gi, rep(NA, maxlength-length(Gi)))
AllG <- cbind(AllG, G)
}
AllG
AllG <- NULL
for (i in c(4,5,11:14)){
Gi <- Allresults[[i]][,"G"]
G <- c(Gi, rep(NA, maxlength-length(Gi)))
AllG <- cbind(AllG, G)
}
AllG
Allresults[[4]][,"G"]
names(Allresults[[4]])
names(Allresults)[4]
names(Allresults)[5]
names(Allresults)
maxlength <- max(unlist(lapply(Allresults, function(x){return(dim(x)[1])})))
AllG <- NULL
for (i in c(5,6,11:14)){
Gi <- Allresults[[i]][,"G"]
G <- c(Gi, rep(NA, maxlength-length(Gi)))
AllG <- cbind(AllG, G)
}
AllG
names(G)
colnames(AllG) <- names(Allresults)[c(5,6,11:14)]
AllG
write.csv(AllG, "/home/tom/projecten/Sieperda/R/AllG.csv")
require(EddyCorrelation)
?EddyCorrelation
??EddyCorrelation
frictionVelocity()
frictionVelocity
?install.packages
?install.packages
?round.POSIXt
require(devtools)
install.packages(devtools)
install.packages("devtools)
""
"
install.packages("devtools")
require(devtools)
?devtools
run_examples(GPPFourier)
run_examples("GPPFourier")
?run_examples
run_examples(pkg="GPPFourier")
require(GPPFourier)
run_examples(pkg= ".")
run_examples(pkg="GPPFourier")
run_examples(pkg=GPPFourier)
run_examples(pkg="GPPFourier")
run_examples(pkg="~/projecten/RPackages/GitHub/GPPFourier/GPPFourier_2.1.tar.gz")
run_examples(pkg="~/projecten/RPackages/GitHub/GPPFourier_2.1.tar.gz")
run_examples(pkg="~/projecten/RPackages/GitHub/GPPFourier")
vignette("GPPFourier")
vignette(GPPFourier)
vignettes("GPPFourier"")
""
vignettes("GPPFourier")
vignette(GPPFourier)
vignette("GPPFourier")
require(GPPFourier)
vignette("GPPFourier")
?vignette
vignette(package="GPPFourier")
?GPPFourier
require(GPPFourier)
?GPPFourier
vignette("GPPFourier")
require(GPPFourier)
vignette("GPPFourier")
require(GPPFourier)
vignette(GPPFourier)
vignette("GPPFourier")
require(GPPFourier)
vignette("GPPFourier")
?GPPFourier_t
dt <- as.numeric(diff(Hoernum$time)[1], units="days")
Nf <- 1/dt
phi <- 54.783
lambda <- 8.45
# Diurnal harmonic
T1 <- 1
f1 <- 1/T1
# Tidal harmonics
TO1 <- 25.81933871/24	# O1 period
fO1 <- 1/TO1
TQ1 <- 26.868350/24   # Large lunar elliptic diurnal
fQ1 <- 1/TQ1
GPPt <- GPPFourier_t(gapfill(Hoernum), Nf=Nf, nf=2, NLowPass=Nf, phi=phi, lambda=lambda)
GPPt15 <- GPPFourier_t(gapfill(Hoernum), Nf=Nf, nf=2, NLowPass=15/dt, phi=phi, lambda=lambda)
par(mfrow=c(2,1))
plot(GPPt, type="l", ylab="GPP(t)")
title(main="Hoernum Tief")
lines(GPPt15, lwd=3)
legend("topright", legend=c("1 Day filter", "15 Day filter"),lwd=c(1,3), bty="n")
plotF((GPPt$GPPt-GPPt15$GPPt)[!is.na(GPPt15$GPPt)], dt=dt, xlim=c(0,0.5), type="b", pch=20)
abline(v=c(f1-fO1, f1-fQ1))
title(main="Spectrum of difference")
dt <- as.numeric(difftime(watercolumn$time[2], watercolumn$time[1] , units="days"))
Nfilt <- 1/dt
GPPt <- GPPFourier_t(watercolumn[,c("time", "O2")],
dt=dt,
units="days",
Detrend=TRUE,
filter=TRUE,
Nfilt=Nfilt,
NLowPass=Nfilt,
fDL=NULL,
circular=FALSE,
sides=2,
nf=2)
par(mfrow=c(2,1), cex=1.2)
plot(watercolumn[,c("time", "O2")], type="l", xlab="", ylab=expression(paste(O[2], " [", mu, "M]")))
title(main="Water column")
plot(GPPt, type="l", lwd=3, ylim=c(0,30), xlab="", ylab="GPP")
lines(watercolumn[,c("time","GPP")], col="red")
legend("topleft",
lty=1,
col=c("red", "black"),
legend=c( "Simulated GPP", expression(paste("Complex demodulated ", O[2], " series"))),
bty="n")
dt <- as.numeric(difftime(estuary$time[2], estuary$time[1] , units="days"))
Nfilt <- 1/dt
GPPt <- GPPFourier_t(estuary[,c("time", "O2")],
dt=dt,
Detrend=FALSE,
filter=TRUE,
Nfilt=Nfilt,
NLowPass=Nfilt,
fDL=NULL,
circular=FALSE,
sides=2,
nf=2)
par(mfrow=c(2,1), cex=1.2)
plot(estuary[,c("time", "O2")], type="l", xlab="", ylab=expression(paste(O[2], " [", mu, "M]")))
title(main="Estuary")
plot(GPPt, type="l", lwd=3, xlab="", ylab="GPP", ylim=c(0,30))
lines(estuary$time, filter(filter(estuary$GPP, rep(1/Nfilt, Nfilt)),rep(1/Nfilt, Nfilt)),
type="l",
lwd=3,
ylim=c(0,30),
xlab="",
ylab="GPP",
col="red")
legend("topleft", lty=1, col=c("black", "red"),
legend=c(expression(paste("Demodulated ", O[2], " series")), "GPP"),
bty="n")
tic <- function(gcFirst = TRUE, type=c("elapsed", "user.self", "sys.self"))
{
type <- match.arg(type)
assign(".type", type, envir=baseenv())
if(gcFirst) gc(FALSE)
tic <- proc.time()[type]
assign(".tic", tic, envir=baseenv())
invisible(tic)
}
toc <- function()
{
type <- get(".type", envir=baseenv())
toc <- proc.time()[type]
tic <- get(".tic", envir=baseenv())
print(toc - tic)
invisible(toc)
}
tic <- function(gcFirst = TRUE, type=c("elapsed", "user.self", "sys.self"))
{
type <- match.arg(type)
assign(".type", type, envir=baseenv())
if(gcFirst) gc(FALSE)
tic <- proc.time()[type]
assign(".tic", tic, envir=baseenv())
invisible(tic)
}
toc <- function()
{
type <- get(".type", envir=baseenv())
toc <- proc.time()[type]
tic <- get(".tic", envir=baseenv())
print(toc - tic)
invisible(toc)
}
tic <- function(gcFirst = TRUE, type=c("elapsed", "user.self", "sys.self"))
{
type <- match.arg(type)
assign(".type", type, envir=baseenv())
if(gcFirst) gc(FALSE)
tic <- proc.time()[type]
assign(".tic", tic, envir=baseenv())
invisible(tic)
}
toc <- function()
{
type <- get(".type", envir=baseenv())
toc <- proc.time()[type]
tic <- get(".tic", envir=baseenv())
print(toc - tic)
invisible(toc)
}
tic()
# Calculate GPP(t) by complex demodulation of Hoernum Tief O2 time series
dt <- as.numeric(diff(Hoernum$time)[1], units="days")
Nf <- 1/dt
phi <- 54.783
lambda <- 8.45
# Diurnal harmonic
T1 <- 1
f1 <- 1/T1
# Tidal harmonics
TO1 <- 25.81933871/24	# O1 period
fO1 <- 1/TO1
TQ1 <- 26.868350/24   # Large lunar elliptic diurnal
fQ1 <- 1/TQ1
GPPt <- GPPFourier_t(gapfill(Hoernum), Nf=Nf, nf=2, NLowPass=Nf, phi=phi, lambda=lambda)
GPPt15 <- GPPFourier_t(gapfill(Hoernum), Nf=Nf, nf=2, NLowPass=15/dt, phi=phi, lambda=lambda)
par(mfrow=c(2,1))
plot(GPPt, type="l", ylab="GPP(t)")
title(main="Hoernum Tief")
lines(GPPt15, lwd=3)
legend("topright", legend=c("1 Day filter", "15 Day filter"),lwd=c(1,3), bty="n")
plotF((GPPt$GPPt-GPPt15$GPPt)[!is.na(GPPt15$GPPt)], dt=dt, xlim=c(0,0.5), type="b", pch=20)
abline(v=c(f1-fO1, f1-fQ1))
title(main="Spectrum of difference")
# Calculate GPP(t) by complex demodulation of simulated water column time series
dt <- as.numeric(difftime(watercolumn$time[2], watercolumn$time[1] , units="days"))
Nfilt <- 1/dt
GPPt <- GPPFourier_t(watercolumn[,c("time", "O2")],
dt=dt,
units="days",
Detrend=TRUE,
filter=TRUE,
Nfilt=Nfilt,
NLowPass=Nfilt,
fDL=NULL,
circular=FALSE,
sides=2,
nf=2)
par(mfrow=c(2,1), cex=1.2)
plot(watercolumn[,c("time", "O2")], type="l", xlab="", ylab=expression(paste(O[2], " [", mu, "M]")))
title(main="Water column")
plot(GPPt, type="l", lwd=3, ylim=c(0,30), xlab="", ylab="GPP")
lines(watercolumn[,c("time","GPP")], col="red")
legend("topleft",
lty=1,
col=c("red", "black"),
legend=c( "Simulated GPP", expression(paste("Complex demodulated ", O[2], " series"))),
bty="n")
# Calculate GPP(t) by complex demodulation ofsimulated estuary time series
dt <- as.numeric(difftime(estuary$time[2], estuary$time[1] , units="days"))
Nfilt <- 1/dt
GPPt <- GPPFourier_t(estuary[,c("time", "O2")],
dt=dt,
Detrend=FALSE,
filter=TRUE,
Nfilt=Nfilt,
NLowPass=Nfilt,
fDL=NULL,
circular=FALSE,
sides=2,
nf=2)
par(mfrow=c(2,1), cex=1.2)
plot(estuary[,c("time", "O2")], type="l", xlab="", ylab=expression(paste(O[2], " [", mu, "M]")))
title(main="Estuary")
plot(GPPt, type="l", lwd=3, xlab="", ylab="GPP", ylim=c(0,30))
lines(estuary$time, filter(filter(estuary$GPP, rep(1/Nfilt, Nfilt)),rep(1/Nfilt, Nfilt)),
type="l",
lwd=3,
ylim=c(0,30),
xlab="",
ylab="GPP",
col="red")
legend("topleft", lty=1, col=c("black", "red"),
legend=c(expression(paste("Demodulated ", O[2], " series")), "GPP"),
bty="n")
toc()
require(roxygen2)
setwd("/home/tom/projecten/RPackages/GitHub/GPPFourier")
roxygenize()
3.268/0.95
3.268/0.62
20.83/5.27
3.343/0.626
28.75/5.34
.004/2.3
2.3/.004
?Sys.time
?system.time
0.06/0.004
require(Tides)
vignette(Tides)
vignette("Tides")
?extrema
?TidalCharacteristics
require(Tides)
TCwl <- TidalCharacteristics(waterlevels)
TCwl
N1 <- 5
N2 <- 12
date1 <- TCwl$h$time[match(N1,TCwl$h$N)]
date2 <- TCwl$h$time[match(N2+1,TCwl$h$N)]
wssub <- subset(waterlevels,time>date1&time<date2)
HLsub <- subset(TCwl$HL,time>date1&time<date2)
Hsub <- subset(HLsub,HL=="H")
# as.POSIXct(diff(Hsub$time))
plot(TCwl$h$time,TCwl$h$h,ylab="water level [cmTAW]", xlab="time", type="l",xlim=c(date1,date2),ylim=c(280,360),axes=F) # cm!
axis(2)
days <- as.POSIXct(strptime(paste("2007-03-",1:31),format="%F"))
axis.POSIXct(1,waterlevels$time,format="%a",at=days)
box()
hH <- subset(TCwl$h,HL=="H")
points(hH$time,hH$h,col="blue",pch=20)
T2 <- 5*60*60
pt <- wssub[95,]
pt1 <- data.frame(time=0,h=0)
pt1$time <- pt$time-T2
pt1$h <- approx(wssub$time,wssub$h,xout=pt1$time)$y
pt2 <- data.frame(time=0,h=0)
pt2$time <- pt$time+T2
pt2$h <- approx(wssub$time,wssub$h,xout=pt2$time)$y
points(c(pt1$time,pt$time,pt2$time),c(pt1$h,pt$h,pt2$h),pch=20,type="b")
text(c(pt1$time,pt$time-60*60,pt2$time+2*60*60),c(pt1$h-5,pt$h,pt2$h),c("h(t-T/2)","h(t)","h(t+T/2)"))
TCwl <- TidalCharacteristics(waterlevels)
TCwl <- TidalCharacteristics(waterlevels)
N1 <- 5
N2 <- 12
date1 <- TCwl$h$time[match(N1,TCwl$h$N)]
date2 <- TCwl$h$time[match(N2+1,TCwl$h$N)]
wssub <- subset(waterlevels,time>date1&time<date2)
HLsub <- subset(TCwl$HL,time>date1&time<date2)
Hsub <- subset(HLsub,HL=="H")
# as.POSIXct(diff(Hsub$time))
plot(TCwl$h$time,TCwl$h$h,ylab="water level [cmTAW]", xlab="time", type="l",xlim=c(date1,date2),ylim=c(280,360),axes=F) # cm!
axis(2)
days <- as.POSIXct(strptime(paste("2007-03-",1:31),format="%F"))
axis.POSIXct(1,waterlevels$time,format="%a",at=days)
box()
hH <- subset(TCwl$h,HL=="H")
points(hH$time,hH$h,col="blue",pch=20)
T2 <- 5*60*60
pt <- wssub[95,]
pt1 <- data.frame(time=0,h=0)
pt1$time <- pt$time-T2
pt1$h <- approx(wssub$time,wssub$h,xout=pt1$time)$y
pt2 <- data.frame(time=0,h=0)
pt2$time <- pt$time+T2
pt2$h <- approx(wssub$time,wssub$h,xout=pt2$time)$y
points(c(pt1$time,pt$time,pt2$time),c(pt1$h,pt$h,pt2$h),pch=20,type="b")
text(c(pt1$time,pt$time-60*60,pt2$time+2*60*60),c(pt1$h-5,pt$h,pt2$h),c("h(t-T/2)","h(t)","h(t+T/2)"))
debug(TidalCharacteristics)
TCwl <- TidalCharacteristics(waterlevels)
gapsts
debug(gapsts)
TCwl <- TidalCharacteristics(waterlevels)
length(ts)
ingherits(ts, "POSIXt")
inherits(ts, "POSIXt")
unit
timediffs
timediffs
timediffs
TCwl <- TidalCharacteristics(waterlevels)
undebug(TidalCharacteristics)
TCwl <- TidalCharacteristics(waterlevels)
TCwl <- TidalCharacteristics(waterlevels)
timediffs
timediffs
timediffs
timediffs
timediffs
timediffs
timediffs
timediffs
timediffs
timediffs
timediffs
timediffs
require(Tides)
a
a <- 1
